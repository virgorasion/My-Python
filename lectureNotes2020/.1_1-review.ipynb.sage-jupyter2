{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83300352},"metadata":{"cite2c":{"citations":{"4027820/BZDMC639":{"URL":"https://www.oreilly.com/library/view/head-first-programming/9780596806682/","accessed":{"day":9,"month":10,"year":2018},"id":"4027820/BZDMC639","title":"Head First Programming [Book]","type":"webpage"},"4027820/N6X8PHMT":{"ISBN":"978-0-596-80237-0","author":[{"family":"Barry","given":"Paul"},{"family":"Griffiths","given":"David"}],"call-number":"QA76.73.P98 B37 2009","collection-title":"Head first","edition":"1st ed","event-place":"Beijing ; Sebastopol, CA","id":"4027820/N6X8PHMT","issued":{"year":2009},"note":"OCLC: ocn475745770","number-of-pages":"406","publisher":"O'Reilly","publisher-place":"Beijing ; Sebastopol, CA","shortTitle":"Head first programming","title":"Head first programming: a learner's guide to programming using the Python language","title-short":"Head first programming","type":"book"}}},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"f98935","input":"num = 100\ntype(num)","output":{"0":{"data":{"text/plain":"int"},"exec_count":1,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"2ef03d","input":"#Operasi antara variabel bertipe integer dengn variabel bertipe string\na='struktur data'\nb=str(2)\nhasil=a+b\nprint('hasil=',hasil)","output":{"0":{"name":"stdout","output_type":"stream","text":"hasil= struktur data2\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"0f6210","input":"# Algoritma Branching - Penentuan jenis bilangan\nnum=int(input('Masukkan bilangan = '))\nif num%2==0 :\n    print(num, ' adalah bilangan genap')\nelse:\n    print(num, ' adalah bilangan ganjil')","output":{"0":{"name":"stdout","output_type":"stream","text":"Masukkan bilangan = 5\n5  adalah bilangan ganjil\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"6b62b8","input":"# Algoritma Branching - Penentuan jenis bilangan\nnum=int(input('Masukkan bilangan = '))\nif num%2==0 :\n    print(num, ' adalah bilangan genap')\nif num%2!=0:\n    print(num, ' adalah bilangan ganjil')","output":{"0":{"name":"stdout","output_type":"stream","text":"Masukkan bilangan = 5\n5  adalah bilangan ganjil\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"bcf64e","input":"realNum = 0.9999\ntype(realNum)","output":{"0":{"data":{"text/plain":"float"},"exec_count":2,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"ce3bae","input":"data=\"Hello World\"\ntype(data)","output":{"0":{"data":{"text/plain":"str"},"exec_count":3,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"685f18","input":"boolDat=True\ntype(boolDat)","output":{"0":{"data":{"text/plain":"bool"},"exec_count":4,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"19ab45","input":"#Operasi antara variabel bertipe integer\na=10\nb=5\nhasil=a+b\nprint('hasil=',hasil)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"hasil= 15\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"566bf7","input":"#Operasi antara variabel bertipe float\na=5.5\nb=1.2\nhasil=a+b\nprint('hasil=',hasil)","output":{"0":{"name":"stdout","output_type":"stream","text":"hasil= 6.7\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"44fb2e","input":"#Operasi antara variabel bertipe string\na='struktur'\nb='data'\nhasil=a+' '+b\nprint('hasil=',hasil)","output":{"0":{"name":"stdout","output_type":"stream","text":"hasil= struktur data\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"837a55","input":"#Operasi antara variabel bertipe integer dengn variabel bertipe float\na=10\nb=5.5\nhasil=a+b\nprint('hasil=',hasil)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"hasil= 15.5\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","id":"218b3b","input":"tupData=(1,2,'python',0.8,'numpy')\nprint(tupData)\nprint(tupData[2])\nprint(tupData[1:3])","pos":39,"type":"cell"}
{"cell_type":"code","id":"28e398","input":"# Function tanpa parameter\n\ndef addNumbers():\n    a=int(input('Bilangan pertama = '))\n    b=int(input('Bilangan kedua = '))\n    print('Hasil = ',a+b)\n\n#Main program\naddNumbers()#memanggil fungsi addNumbers agar dieksekusi","pos":50,"type":"cell"}
{"cell_type":"code","id":"430993","input":"tupData=(1,2,'python',0.8,'numpy')\nprint(tupData)\nprint(tupData[2])\ntupData[2]='Java'\nprint(tupData)","pos":41,"scrolled":true,"type":"cell"}
{"cell_type":"code","id":"4b218f","input":"data=\"Where is Waldo ?\"\nprint(data[12]) # Satu karakter\ntemp=data[9:14] # lima karakter\nprint(temp)","pos":28,"type":"cell"}
{"cell_type":"code","id":"56a9ce","input":"arrData=[1,2,'python',0.8,'numpy']\nprint (arrData)\nprint(arrData[1])\nprint(arrData[1:4])","pos":33,"type":"cell"}
{"cell_type":"code","id":"5c4fab","input":"Mat = {(0,3): 1, (2, 1): 2, (3, 3): 3}\nprint(Mat)\nMat[0,2]=4 #penambahan data baru\nprint(Mat)\n#pengecekan data pada index (ind1,ind2), jika tidak terdapat data, maka return value=None, \n#jika terdapat data maka return value=adalah data\ncek=Mat.get((0,1)) \nprint(cek)\ncek=Mat.get((2,1))\nprint('(2,1)=',cek)\ncek=Mat.get((1,3))\nprint('(1,3)=',cek)","pos":47,"type":"cell"}
{"cell_type":"code","id":"83736c","input":"#nilai dirubah melalui method 'replace'\ndata=\"Where is Waldo ?\"\ndata.replace('o','i')","pos":31,"type":"cell"}
{"cell_type":"code","id":"891aa3","input":"#list 2D, dengan 2 baris, 3 kolom\narr2=[[1,2,3],[4,5,6]]\nprint(arr2)\nprint(arr2[0][2])","pos":37,"type":"cell"}
{"cell_type":"code","id":"a41081","input":"# Algoritma Sequence - Konversi Kurs Mata Dollar ke Rupiah\ndollar=int(input('Jumlah Dollar = '))\nrupiah=dollar*15000\nprint(dollar,'$ = Rp.',rupiah)","pos":21,"type":"cell"}
{"cell_type":"code","id":"b17f3e","input":"# Function dengan parameter dan return value\ndef addNumbers(a,b):\n    hasil=a+b\n    return hasil\n\ndef cekGenap(num):\n    if num%2==0:\n        return True\n    else:\n        return False\n\n#Main program\nnum1=int(input('Bilangan pertama = '))\nnum2=int(input('Bilangan kedua = '))\nresult=addNumbers(num1,num2)#memanggil fungsi addNumbers agar dieksekusi\nprint('Hasil Penjumlahan= ', result)\nif cekGenap(result):\n    print(result,' adalah Bilangan Genap')\nelse:\n    print(result,' adalah Bilangan Ganjil')","pos":52,"type":"cell"}
{"cell_type":"code","id":"bc37f7","input":"import checkPrime ","pos":56,"type":"cell"}
{"cell_type":"code","id":"c04432","input":"arrData=[1,2,'python',0.8,'numpy']\nprint(arrData)\narrData[2]='Java'\nprint(arrData)","pos":35,"type":"cell"}
{"cell_type":"code","id":"c5ee2c","input":"#immutable, tidak dapat dirubah melalui assignment operator \ndata=\"Where is Waldo ?\"\ndata[13]='i'\nprint(data)","pos":30,"type":"cell"}
{"cell_type":"code","id":"c94a71","input":"checkPrime.isPrime(2)","pos":57,"type":"cell"}
{"cell_type":"code","id":"e19d5e","input":"# Algoritma Iteration - Menampilkan sejumlah n bilangan genap\n\nnum=int(input('Jumlah bilangan genap = '))\ncount=1\ni=0\nwhile count<=num:\n    if i%2==0:\n        print(count,'. ',i)\n        count=count+1 \n    i=i+1","pos":24,"type":"cell"}
{"cell_type":"code","id":"eb0df8","input":"#Cara-1\nstudData={'001':'Ranti','002':'Diana','003':'Budi','004':'Eri'}\nprint(studData)","pos":44,"type":"cell"}
{"cell_type":"code","id":"ebe187","input":"# Function dengan parameter\n\ndef addNumbers(a,b):\n    print('Hasil = ',a+b)\n\n#Main program\nnum1=int(input('Bilangan pertama = '))\nnum2=int(input('Bilangan kedua = '))\naddNumbers(num1,num2)#memanggil fungsi addNumbers agar dieksekusi","pos":51,"type":"cell"}
{"cell_type":"code","id":"ef2e1f","input":"#Cara-2\nstudentData={}\nstudentData['001']='Fatimah'\nstudentData['002']='Sofiah'\nstudentData['003']='Ahmad'\nstudentData['005']='Ali'\nprint(studentData)","pos":45,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"78caa4","input":"# <font color=blue>Review Algoritma Pemrograman</font>\n\n\nReview Materi dasar Algoritma Pemrograman\n***","pos":0,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"83a940","input":"### Branching / Selection / Pilihan\nAlgoritma *branching* atau *selection* ini merupakan algoritma yang didalamnya terdapat pilihan.  Pada algoritma *branching* terdapat kondisi **True** atau **False**.  Jika memenuhi kondisi **True** maka syntax pada percabangan **True** yang akan diekseskusi, begitu juga sebaliknya. <br>\nIlustrasi algoritma ini dapat dilihat pada Gambar 2.\n\n![title](images/branches.png)<br>\n**Gambar 2. Algoritma *Branches*(Gambar, courtesy: Barry and Griffiths 2009)**","pos":18,"type":"cell"}
{"cell_type":"markdown","exec_count":1,"id":"800fac","input":"## import Modul_perkalianMatrix as matrix\nmatrix.getMatrix()","kernel":"python3","pos":58.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"06c3bc","input":"### Iteration / Looping / Perulangan\nPada Algoritma ini, syntax akan dieksekusi secara berulang-ulang selama kondisi bernilai **True**.  Jika kondisi bernilai **False** maka proses iterasi akan berhenti. Ilustrasi Algoritma ini dapat dilihat pada Gambar 3. <br>\n\n![title](images/iteration.png) <br>\n\n**Gambar 3. Algoritma *Iteration* (Gambar, courtesy:Barry and Griffiths 2009)**","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"08e501","input":"[**Kembali ke Menu Awal**](#Review-Algoritma-Pemrograman)","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"0edf41","input":"### Code\n\nBerikut adalah contoh code untuk operasi antara variabel dengan tipe data yang sama","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"138810","input":"### Latihan - 1\n1. Buat code untuk menghitung factorial suatu bilangan\n2. Buat code untuk menentukan apakah suatu bilangan adalah bilangan prima","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"14b4c8","input":"### Code\n\nBerikut adalah contoh code untuk masing-masing jenis algoritma","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"150264","input":"Elemen atau anggota pada String bersifat **Immutable** atau tidak dapat dirubah dengan melalui operasi *assignment*.  Akan tetapi nilai string dapat dirubah melalui method  *replace* yang terdapat pada string\n\n### Code\n\nBerikut contoh code untuk proses perubahan nilai melalui operasi assignment, dan melalui method pada string","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"1a6764","input":"[**Kembali ke Menu Awal**](#Review-Algoritma-Pemrograman)","pos":42,"type":"cell"}
{"cell_type":"markdown","id":"1acbf7","input":"### Function\nSemakin rumit permasalahan yang harus dipecahkan dengan menggunakan bahasa pemrograman maka semakin kompleks program yang dibuat.\nSecara umum, semakin kompleks algoritma, maka semakin sulit untuk dibaca dan diperbaiki jika terdapat kesalahan atau penambahan *syntax* baru <br>\nOleh karena itu dibutuhkanlah sebuah **function**, dengan function maka syntax-syntax pada program dikelompokkan berdasarkan fungsinya masing-masing.  Dengan pengelompokan ini, maka program akan lebih mudah untuk dibaca maupun diperbaiki.<br> \nSelain itu, dengan pembentukan **function** ini maka, jika dibutuhkan eksekusi perinta-perintah yang sama, maka dapat dilakukan hanya dengan cara memanggil *function* tersebut, tanpa perlu menulis kembali syntax-syntax yang sama.<br>\n\nTerdapat dua hal penting yang harus diperhatikan, yaitu\n1. Parameter/argumen : merupakan nilai yang dikirim oleh syntax pemanggil *function* \n2. Return Value : merupakan nilai yang dihasilkan oleh *function*, dan dikirim kembali ke pemanggil *function*\n\nSecara umum sebuah function dapat didefinisikan sebagai berikut:<br>\n> def NamaFungsi(Argumen,...):\n> > subcode <br>\n> > subcode <br>\n> > return returnValue\n\nUntuk memanggil fungsi, dilakukan dengan menuliskan nama fungsi\n\n\n### Code\n\nBerikut contoh sederhana *function* tanpa parameter, *function* dengan parameter, dan *function* dengan *return value*\n","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"1f01c8","input":"Seperti halnya *list*, *dictionaries* juga dapat berbentuk 2D, yaitu elemen-elemen disusun pada baris dan kolom tertentu, sehingga untuk mengakses suatu data, diperlukan dua buah indeks.  Karena dibutuhkan dua buah index pada dictionaries ini, maka index harus berbentuk tuple (karena sifat index yang tidak boleh dirubah nilainya), sehingga index dictionaries 2D ini ditunjukkan dengan pasangan data atau tuple, '(indeks1,indeks2)'<br>\n\nSalah satu implementasi Dictionaries ini adalah **Sparse Matrix**.  Sparse Matrix merupaan matrix yang memiliki banyak nilai nol, sehingga jika menggunakan list, akan banyak memori yang dibutuhkan.  Sedangkan dictionaries, hanya menyimpan yang dibutuhkan saja.\nMisalkan terdapat sebuah matriks dengan ukuran 4 x 4, yang berarti terdapat 16 elemen pada matriks tersebut.  Hanya saja semua elemen bernilai 'nol' dan hanya indeks tertentu yang bernilai bukan 'nol', seperti :\n\n\\begin{equation*}\n\\mathbf{Mat}=\n\\begin{vmatrix}\n0 & 0 & 0 & 1 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & 2 & 0 & 0 \\\\\n0 & 0 & 0 & 3 \n\\end{vmatrix} \n\\end{equation*}\n\nJika data matriks tersebut direpresentasikan oleh list, maka syntax pembentukan list, dapat dilakukan sebagai berikut:<br>\n$Mat=[[0,0,0,1],[0,0,0,0],[0,2,0,0],[0,0,0,3]]$<br>\n\nAkan tetapi, jika menggunakan dictionaries (dimana index tidak harus berurutan), maka matriks tersebut dapat disimpan dengan syntax berikut:<br>\n$Mat = \\{(0,3): 1, (2, 1): 2, (3, 3): 3\\} $\n\n<br>\nOleh karena itu, dengan representasi dictionaries ini lebih efisien untuk kasus tertentu\n\n### Code\n\nBerikut contoh code pembuatan *sparse matrix * dengan menggunakan dictionary ","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"20f816","input":"### Tuple\n\n**Tuple**, sama halnya dengan list, tuple ini terdiri dari beberapa elemen, dan elemen tersebut dapat terdiri dari berbagai tipe.  Jika pada list, representasi anggota menggunakan kurung siku atau [a,b,c,...,d], maka pada tuple menggunakan kurung atau (a, b, c, ..., d).  Cara pengaksesan elemen atau anggotanya, dilakukan dengan menuliskan index tuple.\n\n### Code\n\nBerikut adalah contoh code untuk inisialisasi tuple dan akses elemen pada tuple","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"2932aa","input":"## Algoritma \n\nTerdapat beberapa jenis algoritma dasar, yaitu:\n\n- *Sequential*\n- *Branching*\n- *Iteration*\n\n### Sequential\n\nAlgoritma *sequential* merupakan algoritma yang harus dikerjakan berurutan, mulai dari langkah pertama sampai dengan langkah terakhir. <br>\nIlustrasi algoritma *sequential* ini dapat dilihat pada Gambar 1.<br>\n![Algoritma](images/sequenceFlow.png)<br>\n**Gambar 1. Algoritma *Sequencial* (Gambar, courtesy:Barry and Griffiths 2009)**","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"37c357","input":"### Code\n\nBerikut adalah contoh-contoh code inisialisasi dan informasi type data dengna menggunakan syntax **type** untuk masing-masing tipe data","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"37db44","input":"### Operasi Data\n\nSetiap variabel dapat dioperasikan dengan menggunakan operasi tertentu, akan tetapi, operasi dapat dilakukan hanya pada variabel-variabel yang memiliki tipe data yang sama atau hampir sama (seperti integer dengan float)","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"3af35d","input":"### List\n\n**List** adalah struktur data yang terdiri dari beberapa elemen atau anggota list dengan berbagai tipe data.  Masing-masing elemen dipisahkan oleh ','.  Seperti $a=[6, 10, 23]$<br>\nDidalam list terdapat **index** yang menunjukkan urutan elemen dari suatu list.  Index dari list ini dimulai dari '0'. Untuk mengakses elemen pada suatu list, dilakukan dengan cara yang sama dengan tipe data string.\n\n### Code\nBerikut ini adalah contoh inisialisasi variabel dengan tipe data list, dan cara mengakses satu dan lebih dari satu elemen pada list","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"45aff2","input":"### Code\n\nBerikut adalah contoh code untuk operasi antara variabel dengan tipe data yang tidak sama","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"49fa17","input":"### Latihan - 2\n\nBuat program untuk menghitung perkalian dua buah matriks yang berukuran 3 x 3 seperti berikut :\n\n\\begin{equation*}\n\\mathbf{A}_1 \\times \\mathbf{A}_2 = \\begin{vmatrix}\n\\mathbf{a1} & \\mathbf{b1} & \\mathbf{c1} \\\\\n\\mathbf{d1} & \\mathbf{e1} & \\mathbf{f1} \\\\\n\\mathbf{g1} & \\mathbf{h1} & \\mathbf{i1}\n\\end{vmatrix} \\times \\ \\begin{vmatrix}\n\\mathbf{a2} & \\mathbf{b2} & \\mathbf{c2} \\\\\n\\mathbf{d2} & \\mathbf{e2} & \\mathbf{f2} \\\\\n\\mathbf{g2} & \\mathbf{h2} & \\mathbf{i2}\n\\end{vmatrix}\n\\end{equation*}\nBuatlah fungsi-fungsi untuk membuat matriks, menghitung perkalian dua buah matriks\n\n\n","pos":53,"type":"cell"}
{"cell_type":"markdown","id":"58dff9","input":"[**Kembali ke Menu Awal**](#Review-Algoritma-Pemrograman)","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"611c43","input":"Berikut adalah pengulangan kembali materi-materi dasar (termasuk contoh code) yang terdapat pada mata kuliah Algoritma Pemrograman :\n1. [Variabel dan Tipe Data](#Variabel-dan-Tipe-Data)\n2. [Jenis Algoritma](#Algoritma)\n3. [String-List-Tuple](#String,-List,-dan-Tuple)\n4. [Dictionaries](#Dictionaries)\n5. [Function](#Function)\n6. [Module](#Module)\n\n","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"7eaf17","input":"[**Kembali ke Menu Awal**](#Review-Algoritma-Pemrograman)","pos":48,"type":"cell"}
{"cell_type":"markdown","id":"85ebfc","input":"### Module\n\nPython juga menyediakan fasilitas untuk membuat **Module**.  Module ini merupakan suatu file yang terdiri dari sebuah atau lebih dari satu **function**.  Dengan mengelompokkan function-function dalam suatu file, akan memudahkan programmer untuk membaca program dan merubah atau memperbaharui program.\n\nModul ini dapat dipanggil di file lain dengan menggunakan keyword **import**.\nTerdapat dua buah pilihan, antara lain :\n```\nimport filename  \nfrom fileName import *\n```\n\nPerbedaan kedua perintah import tersebut adalah pemanggilan function yang terdapat di dalam modul.  \nPada pilihan pertama, untuk memanggil fungsi yang ada di modul ini maka menggunakan perintah filename.namaFungsi\nSedangkan pada pilihan kedua, untuk memanggil fungsi yang ada di modul ini maka menggunakan perintah namaFungsi\n\nHanya saja untuk memanggil fungsi-fungsi yang terdapat pada modul tersebut, program pemanggil harus berada di directory yang sama.  \nOleh karena itu perlu ditambahkan path pada program pemanggil\n\n\n### Code\n\nBerikut contoh pemanggilan module yang sudah dibuat yaitu checkPrime.  Module ini dapat dilihat pada folder code","pos":55,"type":"cell"}
{"cell_type":"markdown","id":"983247","input":"### String, List, dan Tuple\n\n### String\n\n**String** merupakan salah satu tipe data dalam suatu bahasa pemrograman yang terdiri dari beberapa *character*.\nPada tipe data string di python, dikenal **offset**, yang menunjukkan *character* ke- dari posisi awal string (yaitu **offset** 0) .<br>\nContoh offset pada suatu variabel dengan nilai 'Where is Waldo' dapat dilihat pada Gambar 3.<br>\n\n![title](images/string.png)<br>\n**Gambar 3. Tipe data String dan offset** <br>\n\nSuatu karakter pada string dapat diakses dengan menggunakan syntax namaVariabel[offset], atau jika terdapat beberapa karakter yang harus diakses, dapat menggunakan syntax namaVariabel[offsetAwal:offsetAkhir-1]\n\n### Code\nBerikut adalah contoh inisialisasi variabel dengan tipe data string, dan cara pengaksesan satu dan lebih dari satu karakter","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"9becf0","input":"## Variabel dan Tipe Data\n\nVariabel adalah sebuah nama atau identitas yang merepresentasikan suatu nilai dengan tipe data tertentu. <br>\nBerbagai macam tipe data dasar yang dikenal dalam bahasa pemrograman Python, antara lain:\n    - Integer, merupakan data numerik\n    - Float, merupakan data numerik yang berbentuk real\n    - String, merupakan data teks\n    - Boolean, merupakan data yang hanya memiliki dua nilai saja, yaitu True dan False","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"a0f6d1","input":"Berbeda dengan tipe data string, anggota atau elemen dari list ini bersifat **Mutable**, atau nilai elemen pada list dapat dirubah melalui operasi *assignment*, yaitu menggunakan operator *assignment* '='\n\n### Code\n\nBerikut adalah contoh code untuk merubah nilai elemen dari suatu list","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"a1986e","input":"### Latihan - 3\n\nBuatlah module yang berisi fungsi-fungsi yang terdapat pada Latihan 2, dan gunakanlah modul tersebut untuk mengalikan dua buah matriks","pos":58,"type":"cell"}
{"cell_type":"markdown","id":"ac760d","input":"[**Kembali ke Menu Awal**](#Review-Algoritma-Pemrograman)","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"d2ca2b","input":"[**Kembali ke Menu Awal**](#Review-Algoritma-Pemrograman)","pos":59,"type":"cell"}
{"cell_type":"markdown","id":"e8ce7b","input":"**List 2D** adalah list yang berbentuk dua dimensi, yaitu bentuk data seperti halnya matriks dua dimensi, yang memiliki baris dan kolom.  Misalkan terdapat suatu list dua dimensi, dengan 3 baris, dan dua kolom, maka inisialisasi list tersebut dapat dilakukan dengan cara:<br>\n$namaVariabel=[[a11,a12],[a21,a22],[a31,a32]]$\n<br>\nUntuk mengakses data yang terdapat pada list ini, diperlukan dua buah indeks, yaitu indeks yang menyatakan baris, dan indeks yang menyatakan kolom.  Indeks dimulai dari 0.\n\n### Code\nBerikut adalah contoh pembentukan list 2D, dan cara mengakses data yang terdapat pada list tersebut","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"ecb502","input":"### Dictionaries\n\nDictionaries ini hampir sama dengan struktur data **List** hanya saja, jika pada list menggunakan **index berupa integer** untuk menunjukkan posisi elemen di dalam list, maka pada **dictionaries** ini, maka index pada *dictionaries* yang digunakan tidak hanya bertipe **integer**, akan tetapi **string** juga dapat digunakan sebagai index.  Sehingga untuk keperluan tertentu, dictionaries ini akan lebih cocok digunakan untuk merepresentasikan suatu data.  <br>\n\nPada *dictionaries*, index ini disebut juga dengan **keys**.\nJika pada list menggunakan '[...]', dan tuple  menggunakan (...), maka dictionaries menggunakan kurung kurawal untuk mendefinisikan anggotanya, yaitu {...}.  Antara satu elemen dengan elemen yang lain, dipisahkan dengan koma ','.\n<br>\nInisialisasi variabel yang berbentuk *dictionaries* ini dapat dilakukan dengan dua cara, yaitu \n1. Menuliskan semua anggotanya secara langsung, namaVariabel={key1:data1, key2:data2,...}\n2. Menuliskan satu-persatu anggotanya\n\n### Code\n\nBerikut adalah contoh inisialisasi *dictionaries* dengan dua cara tersebut","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"f6b14b","input":"Seperti halnya tipe data string, elemen pada tuple bersifat **immutable**, nilai anggota tidak dapat dirubah.  Oleh karena itu tuple biasanya digunakan untuk merepresentasikan kumpulan data konstan, dan untuk index *dictionary* (karena index tidak boleh dirubah).\n\n### Code\n\nBerikut contoh code untuk menunjukkan sifat immutable pada tuple","pos":40,"type":"cell"}
{"id":0,"time":1583386514085,"type":"user"}
{"last_load":1583386514892,"type":"file"}