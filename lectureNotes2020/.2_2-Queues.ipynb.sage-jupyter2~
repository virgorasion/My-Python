{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83185664},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.7"}},"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"e47289","input":"","pos":23,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":25,"id":"ba2b7c","input":"def ularNaga(nama, hitungan):\n    gameQueue = createQueue()\n    for namaAnak in nama:\n        enqueue(gameQueue,namaAnak)\n    print('Peserta Permainan=',gameQueue)\n    while size(gameQueue) > 1:\n        for i in range(hitungan):\n            enqueue(gameQueue,dequeue(gameQueue))\n            print('hitungan ke-',i,'=',gameQueue)\n        dequeue(gameQueue)\n        print('Peserta Permainan=',gameQueue)\n    return dequeue(gameQueue)","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"ad34e6","input":"def createQueue():\n    q=[]\n    return (q)\ndef enqueue(q,data):\n    q.insert(0,data)\n    return(q)\ndef dequeue(q):\n    data=q.pop()\n    return(data)\ndef isEmpty(q):\n    return (q==[])\ndef size(q):\n    return (len(q))","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"a12779","input":"enqueue(q,'matematika')\nenqueue(q,'struktur data')\nenqueue(q,'bahasa inggris')\nenqueue(q,'pemrograman web')\nprint(q)","output":{"0":{"name":"stdout","output_type":"stream","text":"['pemrograman web', 'bahasa inggris', 'struktur data', 'matematika']\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"c57306","input":"temp=dequeue(q)\nprint(q)\nprint(temp)","output":{"0":{"name":"stdout","output_type":"stream","text":"['pemrograman web', 'bahasa inggris', 'struktur data']\nmatematika\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"90b5f7","input":"enqueue(q,dequeue(q))\nprint(q)","output":{"0":{"name":"stdout","output_type":"stream","text":"['struktur data', 'pemrograman web', 'bahasa inggris']\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"3ec78a","input":"a=dequeue(q)\nprint(a,q)","output":{"0":{"name":"stdout","output_type":"stream","text":"bahasa inggris ['struktur data', 'pemrograman web']\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"189aca","input":"enqueue(q,'new')","output":{"0":{"data":{"text/plain":"['new', 'struktur data', 'pemrograman web']"},"exec_count":14,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"9edacb","input":"isEmpty(q)","output":{"0":{"data":{"text/plain":"False"},"exec_count":15,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"eb657f","input":"size(q)","output":{"0":{"data":{"text/plain":"3"},"exec_count":16,"output_type":"execute_result"}},"pos":17,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"616e98","input":"ularNaga(['andi','rita','sari','anton','rafa','diana','zaki'],2)","output":{"0":{"name":"stdout","output_type":"stream","text":"Peserta Permainan= ['zaki', 'diana', 'rafa', 'anton', 'sari', 'rita', 'andi']\nhitungan ke- 0 = ['andi', 'zaki', 'diana', 'rafa', 'anton', 'sari', 'rita']\nhitungan ke- 1 = ['rita', 'andi', 'zaki', 'diana', 'rafa', 'anton', 'sari']\nPeserta Permainan= ['rita', 'andi', 'zaki', 'diana', 'rafa', 'anton']\nhitungan ke- 0 = ['anton', 'rita', 'andi', 'zaki', 'diana', 'rafa']\nhitungan ke- 1 = ['rafa', 'anton', 'rita', 'andi', 'zaki', 'diana']\nPeserta Permainan= ['rafa', 'anton', 'rita', 'andi', 'zaki']\nhitungan ke- 0 = ['zaki', 'rafa', 'anton', 'rita', 'andi']\nhitungan ke- 1 = ['andi', 'zaki', 'rafa', 'anton', 'rita']\nPeserta Permainan= ['andi', 'zaki', 'rafa', 'anton']\nhitungan ke- 0 = ['anton', 'andi', 'zaki', 'rafa']\nhitungan ke- 1 = ['rafa', 'anton', 'andi', 'zaki']\nPeserta Permainan= ['rafa', 'anton', 'andi']\nhitungan ke- 0 = ['andi', 'rafa', 'anton']\nhitungan ke- 1 = ['anton', 'andi', 'rafa']\nPeserta Permainan= ['anton', 'andi']\nhitungan ke- 0 = ['andi', 'anton']\nhitungan ke- 1 = ['anton', 'andi']\nPeserta Permainan= ['anton']\n"},"1":{"data":{"text/plain":"'anton'"},"exec_count":26,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"e5272c","input":"q=createQueue()","pos":10,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"352196","input":"## Definisi Queues\n\nQueues atau antrian merupakan struktur data dimana penambahan data baru dan penghapusan data berada di ujung yang berbeda. Hal ini berbeda dengan stacks, dimana penambahan data baru dan penghapusan data, dilakukan pada ujung yang sama.<br>\nPada Queues, seperti halnya antrian, penambahan data baru dilakukan di suatu ujung atau yang dikenal dengan nama **rear**, dan penghapusan data dilakukan pada ujung yang dikenal dengan nama **front**, seperti yang terlihat pada Gambar 1 berikut : <br>\n![title](images/queues1.png)<br>\n**Gambar 1. Queues atau Antrian**","pos":2,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"9111fb","input":"[**Kembali ke Menu Awal**](#Queues)","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"06624b","input":"[**Kembali ke Menu Awal**](#Queues)","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"08d00e","input":"Berikut adalah contoh penggunan struktur queues yang telah dibuat","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"0f193d","input":"## Code\n\nBerikut adalah code-code untuk pembentukan queues dan operasi-operasi yang terdapat pada queues","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"150aa5","input":"## Operasi pada Queues \n\nTerdapat beberapa operasi dasar pada struktur data Queues ini, antara lain :\n    - queue (),         inisialisasi struktur data queue kosong\n    - enqueue (data),   penambahan *data* baru pada queue\n    - dequeue (),        penghapusan data   \n    - isEmpty(),        pengecekan apakah queue dalam keadaan kosong\n    - size (),          informasi jumlah data yang terdapat pada queue\n    ","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"2a5823","input":"# <font color=blue>Queues</font>\n\n\nStruktur Data\n***","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"55c007","input":"[**Kembali ke Menu Awal**](#Queues)","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"73d5c2","input":"Struktur data kedua adalah *Queues*, yang terdiri dari :\n1. [Queues](#Definisi-Queues)\n2. [Operasi Queues](#Operasi-pada-Queues)\n3. [Contoh Implementasi Queues](#Implementasi-Queues)","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"a9eec4","input":"Ilustrasi penambahan dan penghapusan data dapat dilihat pada Gambar 2 dan Gambar 3 berikut :<br>\n![title](images/queuesInsert.png)<br>\n**Gambar 2. Operasi enqueue pada queues** <br>\n\n\n![title](images/enqueue.png)<br>\n**Gambar 3. Operasi dequeue pada queues** <br>\n\nPada Gambar 2 ditunjukkan bahwa penambahan data baru (enqueue) dilakukan pada ujung data 'rear', sedangkan penghapusan data (dequeque) dilakukan pada ujung data 'front', karena sifat queues yang FIFO. <br>\n\nImplementasi queues dapat dilakukan pada tipe data lists.  Data pada **indeks terakhir** pada list adalah merupakan data yang terletak pada ujung **front** pada queues.  Sehingga proses dequeue dilakukan dengan menggunakan method pop pada list. <br>\nSedangkan data pada indeks awal, atau indeks ke-0 dari list, menunjukkan data yang terletak pada posisi **rear** dari queues.  Oleh karena itu proses enqueue dilakukan dengan method insert pada posisi 0 dari list. <br>\n\nMisalkan terdapat data berbentuk list, sebagai berikut :<br>\n```\ndata=[8, 3, 9, 2]\n```\nJika dilakukan ```data.insert(0,74)```, atau penambahan data pada posisi **rear**, maka data akan berubah menjadi :<br>\n```\ndata=[74, 8, 3, 9, 2]\n```\nJika dilakukan ```data.pop()```, atau penghapusan data pada posisi **front**, maka data akan berubah menjadi :<br>\n```\ndata=[74, 8, 3, 9]\n```","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"bfc5b5","input":"Jika konsep penambahan atau penghapusan data pada stacks dikenal dengan nama LIFO (Last In First Out), maka pada Queues menggunakan konsep **FIFO (First In First Out)**","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"fc13a3","input":"## Implementasi-Queues\n\n\nContoh implementasi queues ini adalah permainan anak-anak, yaitu permainan ular naga.\nPada permainan ini, sekelompok anak berbaris dan dan terdapat dua buah anak sebagai penjaga, yang bertugas untuk 'menangkap anak' seiring dengan lagu 'ular naga' berakhir.  Permainan ini akan berakhir jika hanya terdapat satu anak yang memenangkan permainan, yaitu anak tersebut lolos dari tangkapan penjaga, seperti yang terlihat pada Gambar 4 <br>\n\n![title](images/permainanQueue.png) <br>\n**Gambar 4. Permainan Ular Naga**<br>\n\nBerikut code simulasi dari permainan tersebut, dengan sedikit modifikasi, yaitu fungsi penjaga dan lagu 'ular naga' digantikan dengan bilangan tertentu, dan sekolompok anak disusun dalam suatu antrian.\nPermainan akan terus berjalan, sampai dengan hitungan bilangan tertentu tersebut.  Jika pada hitungan tertentu, terdapat anak yang berada di ujung antrian (*front*), maka anak tersebut harus keluar barisan antrian. \nPermainan dimenangkan oleh seorang anak yang tersisa di dalam antrian.\n\n\n## Code","pos":19,"type":"cell"}
{"id":0,"time":1584621772241,"type":"user"}
{"last_load":1584621772288,"type":"file"}