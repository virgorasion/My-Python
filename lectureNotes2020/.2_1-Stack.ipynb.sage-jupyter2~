{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83611648},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"}},"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":22,"id":"5534b9","input":"def paranthesesCheck(strMath):\n    operandStack=stack()\n    lenMath=len(strMath)\n    openOperand='({['\n    closeOperand=')}]'\n    #print(lenMath)\n    i=0\n    Matched=True;\n    while i<(lenMath):\n        #print(i,'=',strMath[i])\n        if strMath[i] in openOperand:\n            push(operandStack,strMath[i])\n            #print(operandStack)\n        elif strMath[i] in closeOperand:\n            if not (isEmpty(operandStack)):\n                top=pop(operandStack)\n                #print(\"top=\",top)\n                #print (operandStack)\n                if openOperand.index(top)==closeOperand.index(strMath[i]):\n                    Matched=Matched and True\n                else:\n                    Matched=Matched and False\n                    print ('Kurung Buka dan Kurang Tutup tidak Cocok')\n            else:\n                Matched=Matched and False\n                print('Jumlah Kurung Tutup lebih banyak')\n        i=i+1\n        #print(Matched)\n    if not(isEmpty(operandStack)):\n        Matched=False\n        print('Jumlah Kurung Buka Lebih banyak')\n    return(Matched)","pos":19,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":23,"id":"7c26c6","input":"a='5 x (4 + 5) / ((3 + 2) x (10 - 8)'","pos":20,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":26,"id":"539698","input":"def evaluatePost(postStr):\n    operandStack=stack()\n    operator='+-/*'\n    for i in postStr:\n        if i not in operator:\n            push(operandStack,i)\n        else:\n            oprnd2=pop(operandStack)\n            oprnd1=pop(operandStack)\n            if i=='+':\n                result=float(oprnd1)+float(oprnd2)\n            elif i=='-':\n                result=float(oprnd1)-float(oprnd2)\n            elif i=='*':\n                result=float(oprnd1)*float(oprnd2)\n            else:\n                result=float(oprnd1)/float(oprnd2)\n            push(operandStack,result)\n    return(pop(operandStack))","pos":34,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":9,"id":"4853fb","input":"def stack():\n    s=[]\n    return (s)\ndef push(s,data):\n    s.append(data)\ndef pop(s):\n    data=s.pop()\n    return(data)\ndef peek(s):\n    return(s[len(s)-1])\ndef isEmpty(s):\n    return (s==[])\ndef size(s):\n    return(len(s))","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"854460","input":"def stack():\n    s=[]\n    return (s)\ndef push(s,data):\n    s.append(data)\ndef pop(s):\n    data=s.pop()\n    return(data)\ndef peek(s):\n    return(s[len(s)-1])\ndef isEmpty(s):\n    return (s==[])\ndef size(s):\n    return(len(s))","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"eb528b","input":"st=stack()\nisEmpty(st)","output":{"0":{"data":{"text/plain":"True"},"exec_count":2,"output_type":"execute_result"}},"pos":12,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"e21d37","input":"isMatched=paranthesesCheck(b)\nprint(isMatched)","output":{"0":{"name":"stdout","output_type":"stream","text":"Jumlah Kurung Buka Lebih banyak\nFalse\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"59bd6d","input":"paranthesesCheck('5 x (4 + 5) / ((3 + 2) x (10 - 8))')","output":{"0":{"data":{"text/plain":"True"},"exec_count":25,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"8b4421","input":"print(evaluatePost('45-6*'))","output":{"0":{"name":"stdout","output_type":"stream","text":"-6.0\n"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"998f7b","input":"paranthesesCheck('5 x (4 + 5} / ((3 + 2) x (10 - 8))')","output":{"0":{"name":"stdout","output_type":"stream","text":"Kurung Buka dan Kurang Tutup tidak Cocok\n"},"1":{"data":{"text/plain":"False"},"exec_count":28,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"8bc5ca","input":"push(st,100)\npush(st,23)\npush(st,34)\npop(st)\npush(st,56)\npop(st)\nprint(st)","output":{"0":{"name":"stdout","output_type":"stream","text":"[100, 23]\n"}},"pos":13,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"567325","input":"### Evaluasi Ekspressi Postfix\n\nSeperti yang sudah dijelaskan sebelumnya, evaluasi untuk ekspressi aritmatika Postfix dilakukan setelah terdapat dua buah operand sebelum sebuah operator.\nMisalkan : \n87+2\\*, yang berarti (8+7)\\*2=30,\noleh karena itu berikut algoritma untuk mengevaluasi ekspressi aritmatika postfix :\n1. baca string mulai dari kiri\n2. Jika character yang dibaca adalah sebuah operand, maka push operand tersebut.\n3. Jika character yang dibaca adalah sebuah operator, maka pop dua buah operand yang terdapat pada stack, operasikan dua buah operand tersebut dengan operator, dan push hasil operasinya\n4. hasil akhir adalah angka terakhir yang terdapat di dalam stack\n\n### Code\n\nBerikut code untuk evaluasi ekspressi postfix","pos":33,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"b6ec32","input":"## Struktur Data \n\nStruktur data merupakan cara programmer untuk merepresentasikan suatu data, dan memudahkan programmer untuk menyelesaikan permasalahan dengan menggunakan struktur data tersebut.\n\nStruktur data **Linear Structure** merupakan struktur data sederhana dimana ketika data ditambahkan maka data tersebut berada pada posisi relatif terhadap data yang lain dari struktur data tersebut.\nLinear structure ini memiliki dua buah ujung.  Dua buah ujung ini memiliki beberapa istilah seperti **left-right**, **front-rear**, ataupun **top-bottom**.\nTerdapat beberapa struktur data yang termasuk pada linear structure ini, yaitu :\n    - Stacks\n    - Queues\n    - Lists\n\nKetiga jenis struktur data tersebut berbeda dalam penambahan atau penghapusan suatu data.  Misalkan, suatu struktur data hanya diperbolehkan menghapus data pada salah satu ujung, sedangkan pada struktur data lain, penghapusan data dapat dilakukan pada kedua ujung. ","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"148489","input":"### Latihan - 1\n\nBuat function untuk 'reverse word' dengan menggunakan konsep **stacks**, misalkan kata 'stacks' menjadi 'skcats'","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"173064","input":"Ilustrasi proses penambahan data atau yang dikenal dengan istilah **push** dapat dilihat pada Gambar 2 berikut. <br>\n![title](images/pushStack1.png)<br>\n**Gambar 2. Operasi push pada Stacks**<br>\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"1c9bc7","input":"Berikut contoh ekspressi aritmatik **infix** dan konversinya ke **prefix** dan **postfix**.\n","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"1e03d5","input":"### Latihan - 2\n\nBuat function untuk mengkonversi bilangan desimal menjadi bilangan biner dengan menggunakan konsep **stack**","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"243179","input":"Contoh konversi dari infix ke postfix dapat dilihat pada Gambar 5.<br>\n![title](images/infixToPostfix.png) <br>\n**Gambar 5. Konversi bilangan desimal ke biner**<br>","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"28cc41","input":"[**Kembali ke Menu Awal**](#Stacks)","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"37bd30","input":"## Definisi Stacks\n\n\n**Stacks** adalah satu struktur data dimana penambahan dan penghapusan data, hanya dapat dilakukan pada satu ujung yang **sama**, atau yang biasa dikenal dengan istilah **top**.\n\nSemakin data jauh berada dari posisi top, maka data tersebut diindikasikan berada di stack lebih lama dibandingkan dengan data yang berada dekat pada data di posisi top.\n\nJika terdapat data baru yang ditambahkan di stack, maka data ini pulalah yang akan dihapus ketika terdapat proses penghapusan data.  Konsep ini dikenal dengan nama **LIFO-Last In First Out**.\n\nKonsep stack ini dapat ditemui pada permasalahan sehari-hari, misalkan tumpukan buku pada Gambar 1 berikut.<br> \n\n![title](images/bookStack1.png) <br>\n**Gambar 1. Tumpukan buku**\n\nJika kita ingin mengambil buku pada tumpukan buku tersebut, maka buku yang dapat kita ambil adalah buku yang berada di posisi teratas.  Jika ingin mengambil buku yang berada di posisi paling bawah, maka kita harus mengambil buku-buku yang berada di posisi atasnya terlebih dahulu.\nBegitu juga ketika terdapat penambahan buku baru, maka buku baru ini akan berada di posisi paling atas.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"4c16fd","input":"## Implementasi Stacks\n\nBerikut adalah contoh implementasi untuk penggunaan stacks, yaitu *delimiter matching* dan konversi desimal ke biner\n\n### Delimiter Matching\n\n**Parentheses** sering digunakan untuk urutan penyelesaian dalam persamaan Matematika, seperti contoh berikut:\n\nP = 5 x (4 + 5) / ((3 + 2) x (10 - 8))\n\nDengan penggunaan **parentheses** maka persamaan tersebut dapat diselesaikan secara benar, hanya saja terkadang **parentheses** yang ditulis tidak lengkap, sehingga hasil persamaan tidak dapat dikerjakan atau tidak sesuai dengan yang diinginkan, seperti contoh berikut :\n\nP = 5 x (4 + 5) / ((3 + 2) x (10 - 8)\n\nOleh karena itu diperlukan algoritma untuk pemeriksaan parentheses ini atau secara umum **delimiter**, yaitu '{ }', '[ ]', dan '( )'. <br>\n\nBeberapa tahapan atau algoritma untuk pengecekan *parentheses* ini adalah :\n1. Baca setiap karakter yang terdapat pada suatu string matematika\n2. Jika karakter adalah kurung buka, maka masukkan dalam stack\n3. Jika karakter adalah kurung tutup, ada beberapa kondisi yang harus diperiksa, yaitu :\n    - Jika stack dalam keadaan empty, maka jumlah kurung tutup lebih banyak daripada kurung buku\n    - Jika stack dalam keadaan tidak empty, maka maka pop stack, dan cocokkan karakter hasil pop dengan kurung tutup, jika sejenis, maka *matched*, jika tidak maka jenis kurung tidak sama\n4. Jika semua karakter telah terbaca, dan stack masih dalam keadaan terisi (tidak *empty*), maka jumlah kurung buka lebih banyak daripada kurung tutup\n","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"64e91a","input":"[**Kembali ke Menu Awal**](#Stacks)","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"667803","input":"|    Infix   |  Prefix  |  Postfix |\n|------------|----------|----------|          \n|   A+B      |  +AB     |   AB+    |\n| (A+B)*C    |  *+ABC   |   AB+C*  |\n|(A+B)*(C-D) | *+AB-CD  | AB+CD-*  |\n| A+B*C-D    | -+A*BCD  | ABC*+D-  |\n| A+B-C+D    | +-+ABCD  | AB+C-D+  |\n| A\\*B-C\\*D    | -\\*AB\\*CD  | AB\\*CD\\*-  |\n\n","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"69fd58","input":"### Latihan - 3\n\nBuat function untuk mengkonversikan ekspressi aritmatik infix menjadi ekspressi aritmatik postfix\n","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"7bf54c","input":"## Operasi pada Stacks\n\n\nTerdapat operasi dasar pada Stacks, \n    - stack (),   inisialisasi stack yang kosong\n    - push(data), penambahan data baru pada posisi top dari stack\n    - pop(),      penghapusan data yang terdapat di posisi top dari stack. Return value dari fungsi ini adalah data yang  \n                  dihapus dari stack tersebut\n    - peek(),     informasi data yang terletak pada posisi top\n    - isEmpty(), untuk memeriksa apakah stack dalam keadaan kosong\n    - size(),     informasi jumlah data yang terdapat pada stack","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"7da2f8","input":"Sedangkan proses penghapusan data atau yang dikenal dengan istilah **pop** dapat dilihat pada Gambar 3 berikut.<br>\n![title](images/popStack2.png)<br>\n**Gambar 3. Operasi pop pada Stacks**<br>\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"828693","input":"Struktur data yang akan dibahas pertama kali adalah *Stacks*, yang terdiri dari :\n1. [Stacks](#Definisi-Stacks)\n2. [Operasi Stacks](#Operasi-pada-Stacks)\n3. [Contoh Implementasi Stacks](#Implementasi-Stacks)\n4. [Ekspressi Aritmatik Infix, Prefix, Postfix](#Ekspressi-Aritmatik-Infix,-Prefix,-Postfix)","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"84ad21","input":"[**Kembali ke Menu Awal**](#Stacks)","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"ae7788","input":"[**Kembali ke Menu Awal**](#Stacks)","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"b62843","input":"Berikut adalah contoh penggunaan fungsi-fungsi stacks yang telah dibuat","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"b9ad7a","input":"# <font color=blue>Stacks</font>\n\n\nStrutktur Data\n***","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"c46596","input":"### Code\n\nBerikut adalah fungsi untuk pengecekan kurung pada suatu string matematika\n","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"db720f","input":"### Konversi Bilangan \n\nPada dunia ilmu komputer seringkali dibutuhkan proses konversi dari suatu bilangan ke bilangan lain, misalkan dari bilangan desimal menjadi bilangan biner atau menjadi bilangan octal.\nIlustrasi proses konversi dari bilangan desimal ke bilangan biner dapat dilihat pada Gambar 4 berikut. <br>\n![title](images/desToBin2.png)<br>\n**Gambar 4. Konversi bilangan desimal ke biner**<br>\n\nDari Gambar tersebut dapat dilihat bahwa bilangan biner didapatkan dari **sisa** pembagian bilangan desimal dengan **dua**.  Hasil konversi didapatkan dengan cara membaca terbalik semua sisa tersebut.\n","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"ec6b58","input":"## Code\n\nBerikut adalah fungsi-fungsi yang dibutuhkan untuk mengimplementasikan stacks.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"f70eea","input":"Struktur data direpresentasikan dengan lists.  Posisi top dari suatu stacks berada pada posisi terakhir pada list, oleh karena itu, operasi *push* pada stack, menggunakan method *append* dari list, sehingga dengan operasi *append* ini, penambahan data baru terletak pada posisi akhir pada list. <br>.  Misalkan terdapat variabel ```dataStack``` yang menggunakan stacks berisikan data ```dataStack=[4,8,1,0]```, maka posisi top berada pada data ```0```.  Sehingga ketika dilakukan ```push(dataStack,72)```, maka ```dataStack``` akan berubah menjadi ```dataStack=[4,8,1,72]```. <br>\nSedangkan operasi *pop* pada list, menggunakan method *pop* dari list, karena method *pop* ini menghapus data yang terletak pada posisi akhir dari list.","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"fa60f5","input":"## Ekspressi Aritmatik Infix, Prefix, Postfix\n\nEksperssi aritmatik yang sering ditemui adalah operasi aritmatik **infix**.  Pada operasi aritmatik **infix** ini, **operator** (+,-,\\*,/, dll) berada diantara dua buah **operand** (bilangan).  Ekspressi aritmatik ini dapat dengan mudah diselesaikan ketika tidak ada ambiguitas, seperti:\n\\begin{align}\nA + B \\\\\nA * X \\\\\nA - B + C\n\\end{align}\n\nAkan tetapi, ekspressi aritmatik ini akan sulit diselesaikan jika terjadi ambiguitas, seperti ekspressi aritmatik berikut ini:\n\\begin{align}\nA + B * C\n\\end{align}\n\nPada ekspressi tersebut, terdapat ambiguitas, yaitu apakah A + B diselesaikan terlebih dahulu ataukah B \\* C yang harus diselesaikan terlebih dahulu.  Ambiguitas ini dapat diatasi dengan konsep **operator precedence**.  Pada operator precedence, operator-operator dibagi menjadi beberapa level berdasarkan prioritas urutan penyelesaian.  \nPada contoh ekspressi aritmatik A + B \\* C, berdasarkan operator precedence, maka urutan penyelesaian adalah B \\* C kemudian hasilnya ditambahkan dengan A.\nPermasalahan terjadi ketika pada ekspressi aritmatik A + B \\* C, A + B ingin diselesaikan terlebih dahulu.  Untuk penyelesaian ekspressi aritmatik yang tidak sesuai dengan urutan operator precedence, maka tanda '( )' sangatlah diperlukan, sehingga operasi tersebut menjadi (A + B) \\* C.\n\nTanda '( )' **tidaklah diperlukan** pada ekspressi aritmatik **prefix** dan **postfix**.\nPada ekspressi aritmatik **prefix**, operator mendahului operand, sedangkankan ekspressi aritmatik **postfix**, operator ditulis setelah operand.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"ff1194","input":"### Konversi Infix ke Postfix\n\nBerikut algoritma untuk konversi ekspressi aritmatik *infix* ke *postfix* :\n1. Buat struktur data *stack* untuk menampung operator\n2. Baca ekspressi aritmatik dari kiri ke kanan tiap token :\n    - jika token yang dibaca adalah *operand* maka masukkan *operand* tersebut ke dalam *output string*\n    - jika token yang dibaca adalah kurung buka maka *push* kurung buka tersebut ke dalam *stack*\n    - jika token yang dibaca adalah kurang tutup maka *pop* stack semua token sampai ditemukan kurung buka\n    - jika token yang dibaca adalah *operator* maka :\n        - pop operator-operator yang memiliki precedence lebih tinggi atau sama dan masukkan operator tersebut ke dalam *output string*\n        - push token operator ke dalam stack\n3. Jika masih terdapat operator pada stack, maka pop operator yang tersisa dan letakkan pada *output string*        \n    ","pos":30,"type":"cell"}
{"id":0,"time":1585214232343,"type":"user"}
{"last_load":1584616365839,"type":"file"}