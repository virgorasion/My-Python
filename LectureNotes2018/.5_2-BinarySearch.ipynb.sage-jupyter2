{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":14.454976303313547,"memory":35946496},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.7"}},"trust":false,"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"f54870","input":"","pos":11,"state":"done","type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":1,"id":"566752","input":"def binarySearch(listData, data):\n    first = 0\n    last = len(listData) - 1\n    found = False\n        \n    while first <= last and not found:\n        midpoint = (first + last) // 2\n        if listData[midpoint] == data:\n            found = True\n            \n        else:\n            if data < listData[midpoint]:\n                last = midpoint - 1\n            else:\n                first = midpoint + 1\n    \n    return found","pos":4,"state":"done","type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":5,"id":"50b305","input":"a=[4,6,10,34,56,78,99]","pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"5a9d1d","input":"a=[4,6,10,34,56,78,99]\nprint(binarySearch(a,34))","output":{"0":{"name":"stdout","output_type":"stream","text":"True\n"}},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"fb07f5","input":"def binarySearch2(listData, data):\n    if len(listData) == 0:\n        return False\n    else:\n        midpoint = len(listData) // 2\n        \n        if listData[midpoint] == data:\n            return True\n        else:\n            if data < listData[midpoint]:\n                \n                return binarySearch2(listData[first:last+1], data)\n            else:\n                \n                return binarySearch2(listData[midpoint + 1:], data)\n        ","pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"cd15d9","input":"binarySearch2(a,78)","output":{"0":{"data":{"text/plain":"True"},"exec_count":6,"output_type":"execute_result"}},"pos":10,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"6e1cd6","input":"Pada algoritma **binary search** pencarian tidak dilakukan satu persatu, melainkan memanfaatkan kelebihan pencarian di data yang sudah terurut. <br>\nPada *binary search*, pencarian dilakukan pertama kali di indeks list yang berada ditengah. <br>\nJika data yang dicari sama dengan data pada indeks tersebut, maka pencarian berakhir. Akan tetapi jika data yang dicari lebih besar dari data yang berada di indeks tengah tersebuh, maka dilakukan pencarian lagi.  Hanya saja pencarian tidak dilakukan pada seluruh data, hanya data yang berada indeks-indeks setelah indeks tengah tadi, karena data sebelum indeks tengah, pasti lebih kecil nilainya, sehingga tidak perlu dilakukan pencarian lagi.  Proses ini dilakukan secara terus menerus sampai data ketemu atau tidak ada lagi data yang dapat dicari di dalam list.  Oleh karena itu, binary search tidak perlu mencari di semua data pada list, sehingga waktu komputasi yang dibutuhkan lebih cepat dibandingkan dengan pencarian sequential search.\n\nIlustrasi pencarian binary search ini dapat dilihat pada Gambar berikut.![title](images/binSearch.png)","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"394185","input":"## Latihan - 2\n\nModifikasi code Binary Search tersebut, sehingga return value dari fungsi tersebut adalah indeks data (jika data ada)","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"484eec","input":"## Code\n\nSelain dengan model iteratif, algoritma binary search juga dapat ditulis secara rekursif, seperti yang ditunjukkan pada program berikut","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"869bd4","input":"# <font color=blue>Pencarian/*Searching*</font>\n\n\nBinary Searching\n***","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8dbd91","input":"Pencarian dengan algoritma *sequential search* akan menemukan data dengan cepat jika data yang dicari terletak di indeks pertama dari suatu list data.  Akan tetapi jika data yang dicari berada di posisi terakhir dari suatu list atau posisi lain, maka algoritma sequential search ini akan membutuhkan waktu yang lebih lama, karena algoritma ini akan mencari satu persatu, dimulai dari indeks pertama sampai dengan indeks terakhir.\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e27cd1","input":"## Code\n\nBerikut code untuk binary search dengan metode iteratif","pos":3,"state":"done","type":"cell"}
{"id":0,"time":1591969695207,"type":"user"}
{"last_load":1591974361800,"type":"file"}