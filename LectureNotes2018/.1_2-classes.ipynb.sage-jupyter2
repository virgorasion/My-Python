{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80941056},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"trust":true,"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"bd8146","input":"data=BilanganKompleks(4,6)","pos":12,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"dab933","input":"class BilanganKompleks:\n    def __init__(self,a,b):\n        self.real=a\n        self.im=b\n    def display(self):\n        print (self.real,\"+\",self.im,\"i\")\n    def __str__(self):\n        return str(self.real)+\" + \"+str(self.im)+\" i \"","pos":25,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"e4af4e","input":"class BilanganKompleks:\n    def __init__(self,a,b): # constructor\n        self.real=a\n        self.im=b\n    def display(self): # method untuk menampilkan state\n        print (self.real,'+',self.im,'i')","pos":21,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":26,"id":"378350","input":"data1=BilanganKompleks(4,6)\ndata2=BilanganKompleks(2,5)","pos":30,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":29,"id":"a3c065","input":"class BilanganKompleks:\n    def __init__(self,a,b): \n        self.real=a\n        self.im=b\n    def display(self):\n        print (self.real,'+',self.im,'i')\n    def __str__(self):\n        return str(self.real) + \" + \" + str(self.im) + \" i \"\n    def addKompleks(self,obj):\n        a=self.real+obj.real\n        b=self.im+obj.im\n        return BilanganKompleks(a,b)\n    def __add__(self,obj):\n        a=self.real+obj.real\n        b=self.im+obj.im\n        return BilanganKompleks(a,b)","pos":33,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":33,"id":"615ba7","input":"class BilanganKompleks:\n    def __init__(self,a,b): \n        self.real=a\n        self.im=b\n    def display(self):\n        print (self.real,'+',self.im,'i')\n    def __str__(self):\n        return str(self.real) + \" + \" + str(self.im) + \" i \"\n    def addKompleks(self,obj):\n        a=self.real+obj.real\n        b=self.im+obj.im\n        return BilanganKompleks(a,b)\n    def __add__(self,obj):\n        a=self.real+obj.real\n        b=self.im+obj.im\n        return BilanganKompleks(a,b)\n    def __mul__(self,data):\n        temp1=(self.real*data.real)-(self.im*data.im)\n        temp2=(self.real*data.im)+(data.real*self.im)\n        return BilanganKompleks(temp1,temp2)\n","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"21b615","input":"# String\n\ndataStr='Struktur Data' \nprint(dataStr)\ndataStr=dataStr.upper()\nprint(dataStr)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3f5e29","input":"# Lists\n\ndataLs=[4,10,21]\nprint(dataLs)\ndata.append(45)\nprint(dataLs)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4a4e4b","input":"data1=BilanganKompleks(4,6)\ndata1.display()\ndata2=BilanganKompleks(2,3)\ndata2.display()","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4c9dd7","input":"class BilanganKompleks:\n    def __init__(self,a,b):\n        self.real=a\n        self.im=b","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a99e8a","input":"data1=BilanganKompleks(4,6)\ndata2=BilanganKompleks(2,5)\n","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"dc96c3","input":"class BilanganKompleks:\n    def __init__(self,a,b):\n        self.real=a\n        self.im=b\n        \ndata=BilanganKompleks(4,6)\nprint(data)","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e8cd03","input":"# untuk pengecekan tipe data dari variabel num\ntype(data)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"70595c","input":"print('Override Method')\nprint(data1)\nprint(data2)\nprint('Method dalam Class')\ndata1.display()\ndata2.display()","output":{"0":{"name":"stdout","output_type":"stream","text":"Override Method\n4+6i\n2+5i\nMethod dalam Class\n4 + 6 i\n2 + 5 i\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"e878f6","input":"class BilanganKompleks:\n    def __init__(self,a,b):\n        self.real=a\n        self.im=b\n    def display(self):\n        print (self.real,'+',self.im,'i')\n    def __str__(self):\n        return str(self.real) + \" + \" + str(self.im) + \" i \"\n    def addKompleks(self,obj):\n        a=self.real+obj.real\n        b=self.im+obj.im\n        return BilanganKompleks(a,b)","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"1590f7","input":"jumlah=data1.addKompleks(data2)\ndata1.display()\ndata2.display()\nprint(jumlah)","output":{"0":{"name":"stdout","output_type":"stream","text":"4 + 6 i\n2 + 5 i\n6 + 11 i \n"}},"pos":31,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"421bfb","input":"data1=BilanganKompleks(4,6)\ndata1=BilanganKompleks(5,10)\njumlah=data1+data2\nprint(data1)\nprint(data2)\nprint(jumlah)","output":{"0":{"name":"stdout","output_type":"stream","text":"5 + 10 i \n2 + 5 i \n7 + 15 i \n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"570656","input":"a=BilanganKompleks(4,6)\nb=BilanganKompleks(5,10)\nc=a * b\nprint(a)\nprint(b)\nprint(c)","output":{"0":{"name":"stdout","output_type":"stream","text":"4 + 6 i \n5 + 10 i \n-40 + 70 i \n"}},"pos":38,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"07dc74","input":"Python merupakan bahasa pemrograman yang berbasis Object.  Object adalah suatu variabel dengan tipe data *class* yang tidak hanya berisi **nilai atau *state* atau *property***, tetapi object juga memiliki **method atau fungsi-fungsi** yang melekat pada object tersebut dan dapat juga merubah nilai object tersebut.  \n<br>\n\nBerikut beberapa hal yang harus diketahui untuk Pengenalan Pemrograman Berorientasi Obyek (PBO):\n1. [String dan List](#String-dan-List)\n2. [Istilah dalam PBO](#Istilah-dalam-Pemrograman-Berorientasi-Obyek)\n3. [Constructor](#Constructor)\n4. [Method](#Method)\n5. [Override Method](#Override-Method)","pos":1,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"366905","input":"Pada contoh code sebelumnya, dilakukan syntax ```type(data)``` yaitu untuk mengetahui tipe data dari variabel data.<br>\nMisalkan isi dari data tersebut ingin ditampilkan, maka tidak bisa dilakukan dengan cara menulis syntax *print* seperti biasa,  Jika tetap perintahkan print untuk menampilkan data tersebut, maka yang ditampilkan di layar hanyalah alamat tempat data tersebut disimpan, seperti contoh code  berikut.\n\n## Code","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"13c2c8","input":"Dari syntax-syntax tersebut, maka terdapat class dengan nama $BilanganKompleks$ sehingga terdapat tipe data baru yaitu *BilanganKompleks*.  <br>\nKetika suatu variabel dibuat, maka variabel tersebut akan memiliki dua buah nilai yang disimpan dalam variabel didalam class yaitu *real* dan *im*, yang merupakan representasi dari bagian real dan imajiner dari suatu bilangan kompleks.  <br>\n\n**Constructor** ini tidak perlu dipanggil secara eksplisit, akan tetapi otomatis akan dijalankan ketika *instance* (atau sebuah variabel dengan tipe data class) dibuat.  Pada code diatas, perintah ```data=BilanganKompleks(4,6)``` merupakan contoh instansiasi dari class bilangan kompleks, sehingga terbentuk obyek dengan nama $data$, yang memiliki nilai $real=4$, dan nilai $im=6$, yaitu $data=4+6i$.  <br>\nArgumen atau parameter *self* tidak perlu dipanggil pada saat pemanggilan method atau constructor.  Ilustrasi obyek *data* dapat dilihat pada Gambar 1 berikut.<br>\n![title](images/instance.png)<br>\n**Gambar 1. Instansiasi obyek data**","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"14df7d","input":"Pada contoh code diatas, terdapat variabel $dataLs$ yang berbentuk *lists*.  Variabel ini memiliki tiga buah nilai, yaitu 4, 10, dan 21.  Contoh method yang digunakan adalah $append()$, yaitu menambah data pada variabel berbentuk *lists*. Contoh method method lain yang dimiliki tipe data lists yang bisa dimanfaatkan, misalkan $pop()$, $insert()$, $clear()$, $reverse()$, dsb.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"1ffbcf","input":"## Override Method\n\n**Override Method** merupakan penambahan fungsi-fungsi pada syntax-syntax yang sudah ada.  Seperti yang dijelaskan sebelumnya, untuk menampilkan *property* yang terdapat pada suatu obyek, tidak dapat dilakukan dengan menggunakan perintah ```print()```.  <br>\nCara pertama yang sudah dijelaskan adalah membuat method baru di dalam class, yang berfungsi untuk menampilkan *property* suatu class. <br>\nCara kedua adalah dengan cara override method fungsi yang sudah tersedia oleh bahasa pemrograman.  Syntax yang akan di*override* adalah syntax ```print()```. <br>\nYang perlu dilakukan agar suatu object dapat dipanggil dengan perintah *print* adalah object tersebut harus dirubah menjadi string.  Untuk merubah suatu variabel menjadi string, maka suatu class dilengkapi dengan method ```__str__```.  Hanya saja method ini tidak bisa berfungsi secara sempurna sesuai dengan apa yang diinginkan oleh programmer, yaitu agar syntax ```print``` dapat digunakan langsung untuk menampilkan *property* yang terdapat pada suatu class. \n\n## Code\n\nBerikut contoh override method ```__str__``` pada class BilanganKompleks","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"23d28e","input":"## Method\n\nMethod merupakan fungsi-fungsi yang terdapat di dalam suatu class.\nContoh method yang akan dibuat adalah method yang berfungsi untuk menampilkan *property* atau *state* yang terdapat di dalam suatu obyek. <br>\nSyntax pembuatan method adalah :<br>\n```\ndef namaMethod():\n```\n\nSedangkan untuk memanggil method suatu class adalah : <br>\n```\nnamaObyek.namaMethod()\n```\n","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"3328d9","input":"## Code\n\nBerikut adalah contoh pembuatan method ```display()``` yang berfungsi untuk menampilkan *property* yang terdapat pada class Bilangan Kompleks.","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"343dfc","input":"## Code\n\nBerikut overriding method untuk perkalian dua buah bilangan kompleks:","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"505842","input":"Perkalian dua bilangan kompleks juga berbeda dengan perkalian bilangan biasa, karena keistimewaan bilangan kompleks ini.  Perkalian dua buah bilangan kompleks dapat dilakukan sebagai berikut :\n\\begin{eqnarray}\nx1 &=&x_{1}+y_{1}i\\\\\nx2 &=&x_{2}+y_{2}i\\\\\nx1 \\times x2 & =& (x_{1}+y_{1}i) \\times (x_{2}+y_{2}i)\\\\\n& =&(x_{1} \\times x_{2} - y_{1} \\times y_{2} ) + ( (x_{1} \\times y_{2})+ (y_{1} \\times x_{2})i)\n\\end{eqnarray}","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"5a8785","input":"[**Kembali ke Menu Awal**](#Pemrograman-Berorientasi-Obyek)","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"6ef3fb","input":"[**Kembali ke Menu Awal**](#Pemrograman-Berorientasi-Obyek)","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"75c28f","input":"[**Kembali ke Menu Awal**](#Pemrograman-Berorientasi-Obyek)","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"7fdd27","input":"Pada contoh code diatas, terdapat method tambahan pada class $BilanganKompleks$, yaitu method ```display()```, yang berfungsi untuk menampilkan *state* atau *property* obyek dari class $BilanganKompleks$. <br>\nDi dalam method tersebut, digunakan syntax print yang berfungsi untuk menampilkan suatu data.  Perintah ```self.real``` adalah perintah untuk mengakses *state* atau *property* $real$, yang dimiliki oleh class $BilanganKompleks$, begitu juga dengan perintah ```self.im```, digunakan untuk mengakses *property* $im$. Karena property $real$ dan $im$ bertipe data integer, maka syntax ```print()``` dapat dilakukan pada dua *property* tersebut<br>\n\n[**Kembali ke Menu Awal**](#Pemrograman-Berorientasi-Obyek)","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"8e2d6c","input":"## String dan List\n\nContoh tipe data *class* yang sudah dikenal, dan  digunakan sebelumnya, adalah tipe data *lists* ataupun *string*. <br>\nSuatu variabel yang berbentuk *lists* ataupun *string*, memiliki dua buah elemen yang terkandung di dalam variabel tersebut, yaitu nilai atau yang disebut dengan *state*/*property*, serta *method* atau fungsi, yang dapat digunakan untuk mengolah nilai pada variabel tersebut. <br>\nMethod atau fungsi yang melekat pada suatu variabel dapat diakses dengan menggunakan syntax \n```\nnamaObyek.NamaMethod()\n```\n\n\n## Code\n\nBerikut adalah contoh tipe data string dan lists, yang memiliki nilai sekaligus method","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"9d6182","input":"## Latihan 4","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"a8d40a","input":"# <font color=blue>Pemrograman Berorientasi Obyek</font>\n\n\nTipe Data *Class*\n***","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"b12bf7","input":"## Constructor\n\nPenjelasan masing-masing fitur penting pada PBO, dilakukan langsung dengan pemberian contoh.  Contoh class yang akan dibuat adalah bilangan kompleks.  <br>\nSeperti yang telah diketahui, bilangan kompleks terdiri dari bilangan real dan imajiner sebagai berikut $a=x+yi$, dimana $a$ merupakan bilangan kompleks yang tersusun atas bilangan real $x$, dan bilangan imajiner $y$, dan $i=\\surd{-1}$.  Karena bilangan kompleks terdiri dari dua nilai yaitu real dan imajiner, maka bilangan kompleks ini memiliki operasi yang berbeda dibandingkan dengan bilangan lain, misalkan operasi penjumlahan, perkalian, pembagian, pengurangan, dll.  Oleh karena itu, sangat tepat jika bilangan kompleks ini direpresentasikan dalam bentuk tipe data *class*.\n\nSyntax untuk membuat suatu class, adalah sebagai berikut :<br>\n> class namaClass:\n> > def \\__init\\__() : #constructor<br>\n> > def namaMethod () : #Method<br>\n> > ...\n\nSedangkan untuk membuat suatu obyek dengan tipe data class tertentu (proses pembuatan *instance*) adalah :<br>\n```\nnamaObyek=namaClass()\n```\n\n**Constructor** merupakan method yang otomatis dijalankan ketika suatu obyek dibuat.  Syntax untuk pembuatan *constructor* ini adalah :<br>\n```\ndef __init__()\n```\n\n## Code\nBerikut adalah contoh pembuatan tipe data ini dimulai dari mendefinisikan *class* dan membuat constructor dari class tersebut.  Class yang akan dibuat adalah class bilangan kompleks, dimana setiap bilangan kompleks memiliki dua buah nilai, yaitu bagian real, dan bagian imajiner.","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"cbfbdc","input":"Override method ```__sub__``` agar dapat dilakukan operasi pengurangan dua buah bilangan kompleks.","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"d233f7","input":"Oleh karena itu, untuk menampilkan property atau nilai yang dimiliki oleh suatu obyek, tidak dapat dilakukan dengan syntax ```print()``` seperti biasa.<br>\n\nTerdapat dua cara agar objek yang sudah dibuat dapat ditampilkan di layar sesuai dengan yang diinginkan, yaitu:\n - Membuat method baru untuk menampilkan data\n - *override* method standar dari sebuah class","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"d55c62","input":"## Istilah dalam Pemrograman Berorientasi Obyek\nKelebihan dari bahasa pemrogaraman berbasis object, adalah bahasa tersebut menyediakan beberapa fitur agar *programmer* dapat membuat *class* sendiri yang sesuai dengan kebutuhan.  Beberapa istilah dasar yang terdapat pada pemrograman berbasis object ini antara lain :\n- *class*, tipe data yang tidak hanya berisi data tetapi juga method\n- *object*, suatu variabel dengan tipe data *class*\n- *state, property*, bagian data dari suatu class yang berisi nilai, dapat berupa string, integer, float\n- *method*, fungsi yang melekat pada class\n- *constructor*, fungsi yang dijalankan oleh python ketika pertama kali suatu objek dibuat.  Method constructor ini dibuat dengan cara mendefinisikan fungsi _ _init_ _  (dua *underscore*)\n- *self*, merupakan suatu argumen atau parameter spesial agar nilai balik dari method dikembalikan ke objek itu sendiri.  Argumen ini tidak perlu dipanggil (walaupun sudah didefinisikan)pada saat pemanggilan method\n- *instance*, suatu objek yang telah dibuat\n- *override*, mendefinisikan kembali fungsi-fungsi umum yang sudah ada, agar sesuai dengan kebutuhan *programmer*\n","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"db5072","input":"[**Kembali ke Menu Awal**](#Pemrograman-Berorientasi-Obyek)","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"df9511","input":"Penjumlahan dua buah bilangan kompleks berbeda dengan penjumlahan bilangan yang lain, karena bilangan kompleks ini terdiri dari dua bagian yaitu real dan imajiner.  Untuk menjumlahkan bilangan kompleks, maka bagian real harus dijumlahkan pada bagian real juga dari bilangan lain, dan bagian imajiner harus ditambahkan dengan bagian imajiner, seperti persamaan berikut:\n\\begin{eqnarray}\nx1 &=&x_{1}+y_{1}i\\\\\nx2 &=&x_{2}+y_{2}i\\\\\nx1+x2 & =&(x_{1}+y_{1}i)+(x_{2}+y_{2}i)\\\\\n& =&(x_{1}+x_{2})+((y_{1}+y_{2})i)\n\\end{eqnarray}\n\nSeperti halnya fungsi untuk menampilkan *property* yang terdapat pada suatu class, maka untuk melakukan operasi penjumlahan ini juga dapat dilakukan dengan dua buah cara, yaitu :\n- Membuat metode di dalam class untuk operasi penjumlahan\n- Override method\n<br>\n\n## Code\nContoh code berikut adalah pembuatan method baru di dalam class, yang berfungsi untuk menjumlahkan dua buah bilangan kompleks.","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"dff34f","input":"Jika ingin melakukan operasi penjumlahan dengan menggunakan operator '+', maka tidak dapat langsung dilakukan perintah sebagai berikut :<br>\n```\ndata1=BilanganKompleks(4,6)\ndata2=BilanganKompleks(2,5)\njumlah=data1+data2\n```\nOperasi penjumlahan dengan operator '+' hanya dapat dilakukan dengan *override* fungsi ```__add__``` yang sudah tersedia.\n\n## Code\n\nBerikut adalah contoh override method ```__add__```, agar operasi penjumlahan dua buah bilangan kompleks dapat dilakukan dengan menggunakan operator '+'.","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"e73abc","input":"Pada contoh code tersebut, terdapat variabel $dataStr$ yang berjenis *string*, dimana property dari $dataStr$ adalah 'Struktur Data'.  Contoh method yang digunakan adalah method $upper()$, yang berfungsi untuk merubah semua karakter pada $dataStr$ menjadi huruf kapital.  Beberapa contoh method lain yang dapat digunakan adalah $capitalize()$, $lower()$, $find()$, dll. ","pos":4,"type":"cell"}
{"id":0,"time":1569145542115,"type":"user"}
{"last_load":1569145541817,"type":"file"}