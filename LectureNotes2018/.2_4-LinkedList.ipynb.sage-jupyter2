{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":15.596330275227277,"memory":35954688},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"ba8b0f","input":"class Node:\n    def __init__(self, init_data):\n        self.data = init_data\n        self.next = None\n    def getData(self):\n        return self.data\n    def getNext(self):\n        return self.next\n    def setData(self, newdata):\n        self.data = newdata\n    def setNext(self, new_next):\n        self.next = new_next","pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"5b26dc","input":"print(mylist.head)\nmylist.isEmpty()","output":{"0":{"name":"stdout","output_type":"stream","text":"None\n"},"1":{"data":{"text/plain":"True"},"exec_count":10,"output_type":"execute_result"}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"d66b5b","input":"mylist.add(34)\nprint(mylist.head)","output":{"0":{"name":"stdout","output_type":"stream","text":"<__main__.Node object at 0x7f63af6bd208>\n"}},"pos":27,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"f7880d","input":"mylist.add(45)\nprint(mylist.head)\nprint(mylist.head.data)","output":{"0":{"name":"stdout","output_type":"stream","text":"<__main__.Node object at 0x7f63af67e0f0>\n45\n"}},"pos":28,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"852f3e","input":"mylist.add(21)","pos":29,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"c57084","input":"class LinkedList:\n    def __init__(self):\n        self.head = None\n    def isEmpty(self):\n        return self.head==None\n    def add(self, item):\n        temp = Node(item)\n        temp.setNext(self.head)\n        self.head = temp\n    def size(self):\n        curent = self.head\n        count = 0\n        while curent != None:\n            count = count + 1\n            \n            curent = curent.getNext()           \n        return count","pos":33,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"6b18b1","input":"mylist=LinkedList()\nmylist.add(45)\nmylist.add(34)\nmylist.add(70)\nprint(mylist.size())","output":{"0":{"name":"stdout","output_type":"stream","text":"3\n"}},"pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"72e520","input":"class LinkedList:\n    def __init__(self):\n        self.head = None\n    def isEmpty(self):\n        return self.head==None\n    def add(self, item):\n        temp = Node(item)\n        temp.setNext(self.head)\n        self.head = temp\n    def size(self):\n        curent = self.head\n        count = 0\n        while curent != None:\n            count = count + 1\n            curent = curent.getNext()\n        return count\n    def search(self,item):\n        curent = self.head\n        found = False\n        while curent != None and not found:\n            if curent.getData() == item:\n                found = True\n            else:\n                curent = curent.getNext()\n        return found","pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"8732e0","input":"mylist=LinkedList()\nmylist.add(45)\nmylist.add(34)\nmylist.add(70)\nmylist.add(84)\nmylist.size()\nmylist.search(34)","output":{"0":{"data":{"text/plain":"True"},"exec_count":17,"output_type":"execute_result"}},"pos":39,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6ad385","input":"class LinkedList:\n    def __init__(self):\n        self.head = None\n    def isEmpty(self):\n        return self.head==None\n    def add(self, item):\n        temp = Node(item)\n        temp.setNext(self.head)\n        self.head = temp\n    def size(self):\n        curent = self.head\n        count = 0\n        while curent != None:\n            count = count + 1\n            curent = curent.getNext()\n        return count\n    def search(self,item):\n        curent = self.head\n        found = False\n        while curent != None and not found:\n            if curent.getData() == item:\n                found = True\n            else:\n                curent = curent.getNext()\n        return found\n    def display(self):\n        curent = self.head\n        while curent != None:\n            print(curent.getData())\n            curent = curent.getNext()\n        ","pos":41,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":19,"id":"1af0ac","input":"mylist=LinkedList()\nmylist.add(45)\nmylist.add(34)\nmylist.add(70)\nmylist.add(84)\n","pos":43,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"3f135d","input":"a=Node(93)\nb=Node(20)\nprint(a.getNext())\nprint(b.getNext())\na.setNext(b)\nprint(a.getNext())","output":{"0":{"name":"stdout","output_type":"stream","text":"None\nNone\n<__main__.Node object at 0x7f63af675f60>\n"}},"pos":8,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"0c527c","input":"mylist.display()","output":{"0":{"name":"stdout","output_type":"stream","text":"84\n70\n34\n45\n"}},"pos":44,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"43e81a","input":"class LinkedList:\n    def __init__(self):\n        self.head = None\n    def isEmpty(self):\n        return self.head==None\n    def add(self, item):\n        temp = Node(item)\n        temp.setNext(self.head)\n        self.head = temp\n    def size(self):\n        curent = self.head\n        count = 0\n        while curent != None:\n            count = count + 1\n            curent = curent.getNext()\n        return count\n    def search(self,item):\n        curent = self.head\n        found = False\n        while curent != None and not found:\n            if curent.getData() == item:\n                found = True\n            else:\n                curent = curent.getNext()\n        return found\n    def display(self):\n        curent = self.head\n        while curent != None:\n            print(curent.getData())\n            curent = curent.getNext()\n    def remove(self, item):\n        curent = self.head\n        previous = None\n        found = False\n        while not found:\n            if curent.getData() == item:\n                found = True\n            else:\n                previous = curent\n                curent = curent.getNext()\n        if previous == None:\n            self.head = curent.getNext()\n        else:\n            previous.setNext(curent.getNext())\n            ","pos":48,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":22,"id":"024640","input":"mylist=LinkedList()\nmylist.add(45)\nmylist.add(34)\nmylist.add(70)\nmylist.add(84)\nmylist.add(97)\nmylist.display()","output":{"0":{"name":"stdout","output_type":"stream","text":"97\n84\n70\n34\n45\n"}},"pos":50,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":23,"id":"0540d7","input":"mylist.remove(34)","pos":51,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"683a04","input":"mylist.display()","output":{"0":{"name":"stdout","output_type":"stream","text":"97\n84\n70\n45\n"}},"pos":52,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":25,"id":"16f11d","input":"class OrderedLinkedList:\n    def __init__(self):\n        self.head = None\n    def isEmpty(self):\n        return self.head==None\n    \n    def size(self):\n        curent = self.head\n        count = 0\n        while curent != None:\n            count = count + 1\n            curent = curent.getNext()\n        return count\n    \n    def display(self):\n        curent = self.head\n        while curent != None:\n            print(curent.getData())\n            curent = curent.getNext()\n    def remove(self, item):\n        curent = self.head\n        previous = None\n        found = False\n        while not found:\n            if curent.getData() == item:\n                found = True\n            else:\n                previous = curent\n                curent = curent.getNext()\n        if previous == None:\n            self.head = curent.getNext()\n        else:\n            previous.setNext(curent.getNext())       \n    def search(self,item):\n        curent = self.head\n        found = False\n        stop=False\n        while curent != None and not found and not stop:\n            if curent.getData() == item:\n                found = True\n            else:\n                if curent.getData() > item:\n                    stop = True\n                else:\n                    curent = curent.getNext()\n        return found\n    def add(self, item):\n        curent=self.head\n        previous = None\n        stop = False\n        while curent != None and not stop:\n            if curent.getData() > item:\n                stop = True\n            else:\n                previous = curent\n                curent = curent.getNext()\n        \n        temp = Node(item)\n        if previous == None:\n            temp.setNext(self.head)\n            self.head = temp\n        else: # ditautkan antara previous dengan curent\n            temp.setNext(curent)\n            previous.setNext(temp)\n","pos":57,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":26,"id":"f78d72","input":"myList=OrderedLinkedList()","pos":59,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"5eeb88","input":"myList.add(9)","pos":60,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":28,"id":"e95212","input":"myList.add(14)","pos":61,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"f03107","input":"myList.display()","output":{"0":{"name":"stdout","output_type":"stream","text":"9\n14\n"}},"pos":62,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"a66796","input":"class LinkedList:\n    def __init__(self):\n        self.head = None\n    def isEmpty(self):\n        return self.head==None","pos":13,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":30,"id":"027040","input":"myList.add(100)\nmyList.display()","output":{"0":{"name":"stdout","output_type":"stream","text":"9\n14\n100\n"}},"pos":63,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"07c5fe","input":"mylist=LinkedList()","pos":15,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"351337","input":"print(mylist.head)\nmylist.isEmpty()","output":{"0":{"name":"stdout","output_type":"stream","text":"None\n"},"1":{"data":{"text/plain":"True"},"exec_count":5,"output_type":"execute_result"}},"pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"32b9c4","input":"print(mylist.head)","output":{"0":{"name":"stdout","output_type":"stream","text":"None\n"}},"pos":17,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"c8d737","input":"mylist.isEmpty()","output":{"0":{"data":{"text/plain":"True"},"exec_count":7,"output_type":"execute_result"}},"pos":18,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"55eb6b","input":"class LinkedList:\n    def __init__(self):\n        self.head = None\n    def isEmpty(self):\n        return self.head==None\n    def add(self, item):\n        temp = Node(item)\n        temp.setNext(self.head)\n        self.head = temp","pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"78ad37","input":"mylist=LinkedList()","pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"031dfd","input":"Obyek mylist yang telah dibuat pada code diatas yang bertipe *linked list*, adalah linked list yang masih kosong, belum ada node dalam list tersebut, seperti yang ditunjukkan pada Gambar 3. <br>\n![title](images/mylist.png)<br>\n**Gambar 3. Obyek mylist berbentuk Linked List yang belum memiliki Node** <br>","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0d03b4","input":"Pada code diatas, terdapat obyek ```a``` dan obyek ```b``` yang memiliki tipe data class ```Node```.  Pada saat instansiasi, property data kedua obyek ini bernilai ```93``` dan ```20```, serta property ```next``` bernilai **None**.<br>\nPada baris kelima, terdapat perintah ```a.setNext(b)```, yang berarti property ```next``` dari obyek ```a``` akan menunjuk ke obyek ```b```.  Sehingga ketika dilakukan perintah ```print(a.getNext())``` akan menunjukkan ke suatu class Node.","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1e5361","input":"## Ordered List","pos":55,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2079d1","input":"## Penambahan Data pada Linked List\n\nSecara default, penambahan data baru diletakkan pada awal linked list atau yang terdapat pada pointer *head*.   Penambahan data baru ini, dilakukan dengan dua tahapan :\n- Tautkan node baru ini ke node awal dari linked list\n- modifikasi head dari linked list agar menunjuk pada node baru ini, seperti yang ditunjukkan pada Gambar 4 berikut : <br>\n![title](images/addList1.png)<br>\n**Gambar 4. Penambahan node baru secara benar pada linked list**\n\nUrutan tahapan ini **tidak boleh dibalik**, karena jika dibalik maka linked list yang awal tidak lagi dapat ditemukan seperti yang terdapat pada Gambar 5 berikut :<br>\n![title](images/addList2.png)<br>\n**Gambar 5. Penambahan node baru secara tidak tepat pada linked list**","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"286cd1","input":"# <font color=blue>Linked List</font>\n\n\nStruktur Data\n***","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"30308a","input":"Bahasa pemrograman python telah menyediakan type data yang dinamis, yaitu **List**.  Ukuran dari variabel yang bertipe data **list** dapat diatur sesuai dengan keinginan programmer selama program dijalankan, tidak harus mempunyai ukuran tetap di awal.  Tipe data ini juga menyediakan method menambah data pada saat diperlukan, sehingga tipe data ini bersifat dinamis.\n\nAkan tetapi tidak semua pemrograman menyediakan type data seperti ini, oleh karena itu terdapat suatu struktur data yang dapat dibuat oleh programmer yang bersifat dinamis, yaitu **Linked List**. <br>\n<br>\n\nLima hal utama yang terdapat pada struktur data linked list:\n1. [Node](#Node)\n2. [Linked List](#Linked-List-Class)\n3. [Penambahan Data pada Linked List](#Penambahan-Data-pada-Linked-List)\n4. [Traversal Linked List](#Traversal-Linked-List)\n5. [Ordered List](#Ordered-List)\n\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"39f200","input":"[**Kembali ke Menu Awal**](#Linked-List)","pos":64,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3d2619","input":"Berikut adalah contoh penggunaan class Node.","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"45af9a","input":"Berikut adalah contoh penggunaan method ```remove()```","pos":49,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4a3bd3","input":"Untuk traverse linked list sama hal nya dengan method sebelumnya, yaitu terdapat pointer **curent** yang menelusuri node awal sampai dengan node akhir untuk mencari node yang akan dihapus.  Ketika node sudah ditemukan, penghapusan tidak dapat dilakukan langsung begitu saja, karena di dalam node terdapat informasi lain, yaitu next yang menunjukkan lokasi node berikutnya.  Sebelum dilakukan penghapusan perlu dilakukan terlebih dahulu pentautan antara node sebelum node yang dicari dengan node sesudah node yang dicari, sehingga node yang dicari dapat dihapus.  <br>\nOleh karena itu diperlukan pointer tambahan selain **curent**, yaitu pointer **previous**.  Pointer ini bergerak satu langkah sebelum pointer curent, sehingga ketika pointer **curent** sudah menemukan data yang dicari, maka pointer **previous** ini dapat ditautkan dengan node sesudah **curent**.<br> \nIlustrasi ketika data yang akan dihapus berada di tengah *linked list* ditunjukkan pada Gambar 8. <br>\n\n![title](images/remove1.png)<br>\n**Gambar 8. Penghapusan Node pada Linked List** <br>\n\nJika data yang dihapus berada di node awal dari linked list (yang ditunjukkan dengan nilai previous masih *None*, maka yang dilakukan pointer *head* langsung menunjuk pada node setelah node yang akan dihapus tersebut, seperti Gambar 9 berikut:<br>\n![title](images/remove2.png)<br>\n**Gambar 9. Penghapusan Node awal pada Linked List** <br>","pos":46,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4fee16","input":"## Latihan\n\nTambahkan dua buah method sebagai berikut:\n- insertPrevious, yaitu menambahkan node baru sebelum node tertentu\n- insertNext, yaitu menambahkan node baru setelah node tertentu","pos":53,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"51a53a","input":"[**Kembali ke Menu Awal**](#Linked-List)","pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5934a3","input":"Berikut adalah contoh penggunaan method ```search()```","pos":38,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6c9e33","input":"Berikut adalah contoh penggunaan method ```display()```","pos":42,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"77d1e1","input":"## Code\n\nBerikut adalah pembuatan class Node yang merupakan representasi dari sebuah node. *Property* atau *state* yang terdapat pada class Node ini :\n1. data : berisi nilai dari node\n2. next : berisi informasi berikutnya yang ditunjuk oleh node.  Proses intansiasi, property next ini diset ```None``` yang merupakan representasi Nil atau Ground, berarti tidak ada node yang ditunjuk oleh node ini\n\n","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"78c0cd","input":"### Menampilkan seluruh data pada Linked list\n\nProses traversal juga dapat digunakan untuk menampilkan data pada seluruh node yang terdapat pada Linked List.\n\n## Code\nBerikut method ```display()``` untuk menampilkan data dari seluruh node pada linked list","pos":40,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"876ed6","input":"Contoh Node dapat dilihat pada Gambar 2. <br>\n![title](images/node.png)<br>\n**Gambar 2. Node dengan nilai '93'**<br>\n\nPada Gambar 2 tersebut, terdapat dua informasi yang terkandung di dalam node, yaitu data dari node adalah 93, dan node tersebut menunjuk ke *Nil* atau *Ground* atau tidak ada node yang ditunjuk.\n","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"926199","input":"[**Kembali ke Menu Awal**](#Linked-List)","pos":54,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"95e9f7","input":"Berikut ini adalah cara penggunaan class LinkedList yang telah dibuat","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"99cfa3","input":"## Traversal Linked List\n\nUntuk mengetahui ukuran dari list, diperlukan tahapan **traverse**, yaitu menelusuri setiap node yang terdapat pada linked list, seperti pada Gambar 6 sebagai berikut :<br>\n![title](images/sizeList.png)<br>\n**Gambar 6. Traversal Linked List**\n\nPada proses penelusuran atau *traversal* dibutuhkan pointer bantuan. Pointer bantuan yang ditunjukkan pada Gambar 6 tersebut,  adalah pointer curent yang bergerak dari node awal sampai dengan node akhir. <br>\nProses traversal ini dibutuhkan untuk beberapa hal, seperti untuk menghitung jumlah node yang terdapat pada Linked List, untuk mencari node pada linked list, untuk menampilkan seluruh node dari linked list, untuk menyisipkan node setelah atau sebelum node yang sudah terdapat pada linked list, dan untuk menghapus suatu node.\n\n## Code\n\nImplementasi pertama yang dibuat adalah pembuatan method size(), untuk menghitung jumlah node.  Pada method size terdapat beberapa tahapan :\n1. pointer bantuan curent berada pada node yang ditunjuk oleh head (yaitu node pertama)\n2. pointer curent bergerak, dengan perintah ```curent=curent.getNext()```, sekaligus dilakukan increment variabel count, yang merepresentasikan jumlah node\n3. pergerakan atau traversal ini akan berakhir ketika pointer curent menunjuk pada None, yang merepresentasikan, tidak ada lagi node yang terdapat pada Linked list","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9a21a0","input":"Berikut contoh penggunaan method ```size()``` pada class LinkedList","pos":34,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9bc975","input":"Setelah penambahan node terakhir diatas, maka mylist akan berisi = [21, 45, 34]","pos":30,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9c1653","input":"\nOleh karena itu data berikutnya dapat diketahui dengan cari mengikuti informasi *link* yang terdapat pada informasi tambahan tersebut.  Lokasi data pertama dari **linked list** haruslah diketahui secara eksplisit, sehingga dari data pertama tersebut, data kedua data ditemukan, data ketiga, dan seterusnya.  Informasi yang menunjuk pada lokasi data pertama atau **head of the list** tersebut disebut dengan **external reference**. Begitu juga dengan data terakhir, harus ada informasi yang menunjukkan bahwa data tersebut adalah data terakhir di dalam linked list, tidak ada lagi data berikutnya.\n\nUntuk membuat struktur data linked list, terlebih dahulu dibuat **node-node** penyusun linked list tersebut.  **Node** ini harus memiliki setidaknya dua informasi, yaitu informasi mengenai data atau nilai, dan informasi mengenai node berikutnya.  Oleh karena itu **node** dibuat menjadi sebuah tipe data baru yang bertipe **class**, dengan dua informasi yaitu *data* dan *next*.\n\nTerdapat beberapa method penting pada class **node** ini, antara lain:\n- *constructor*, yang akan dijalankan setiap instansiasi class\n- *getData*, untuk mengetahui informasi data yang terdapat pada node tersebut\n- *getNext*, untuk mengetahui informasi node berikutnya, jika tidak ada node berikutnya maka nilai balik berupa *None*\n- *setData*, untuk merubah informasi data yang terdapat pada node tersebut\n- *setNext*, untuk menentukan node berikutnya yang ditunjukan oleh informasi *next* dari node tersebut","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a57d33","input":"Linked list merupakan kumpulan dari node-node yang terhubung satu sama lain.  Untuk mengakses node-node yang terdapat pada linked list tersebut, haruslah diketahui terlebih dahulu lokasi node pertama dari suatu linked list, sehingga diperlukan pointer tambahan untuk menunjukkan keberadaan node pertama.\n\n## Code\nBerikut adalah class untuk linked list, dimana pada class tersebut terdapat pointer yang menunjukkan node pertama dari suatu linked list (*head*).  Terdapat dua buah method utama pada class LinkedList ini, antara lain:\n1. *constructor*, ```__init__```, yang merupakan method yang dijalankan pada saat pembuatan obyek.  Karena obyek baru pertama kali dibuat, maka linked list masih kosong, sehingga pointer *head* masih bernilai *None*.\n2. Method ```isEmpty```, untuk pengecekan apakah linked list memiliki node ataukah tidak.  Jika pointer *head* masih menunjuk pada *None*, maka linked list masih tidak memiliki node, sehingga return value adalah True.\n\n","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a7f707","input":"[**Kembali ke Menu Awal**](#Linked-List)","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b2717f","input":"Berikut adalah contoh penggunaan class LinkedList yang sudah dibuat","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c51a12","input":"Proses pencarian pada linked list sebelumnya dilakukan dengan cara mencari node satu persatu sampai node terakhir.  Proses pencarian ini akan menjadi lebih cepat jika data sudah dalam keadaan terurut, sehingga pencarian dapat dihentikan ketika ditemukan node dengan data lebih rendah atau lebih tinggi.  Class Ordered List akan memudahkan pencarian suatu node, karena data yang terdapat pada class ini sudah dalam keadaan terurut.\n\nMethod yang terdapat pada ordered list, sama halnya dengan class linkedlist, hanya saja terdapat perbedaan pada method untuk **add data** (karena node yang terbentuk harus dalam keadaan terurut), dan method search data.\n\n## Code\n\nBerikut method untuk class ordered list","pos":56,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c5f15c","input":"Berikut adalah contoh penggunaan class ordered Linked List","pos":58,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cf5c5b","input":"## Node\n\nData di dalam memory berada di alamat yang berbeda-beda, jika dibutuhkan agar data-data tersebut dapat terhubung satu sama lain, maka informasi tambahan yang menunjukkan alamat data berikutnya sangatlah diperlukan, seperti yang terlihat pada Gambar 1 berikut. <br>\n![title](images/linkedList1.png)<br>\n**Gambar1. Data-data yang terhubung di dalam memory**","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d3ff46","input":"### Penghapusan Node pada Linked List\n\nPenghapusan data (remove data) dilakukan dengan dua tahapan yaitu :\n- traverse linked list, untuk mencari node mana yang akan dihapus\n- remove data, menghapus node dari linked list","pos":45,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d987db","input":"[**Kembali ke Menu Awal**](#Linked-List)","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e9065c","input":"## Code\n\nBerikut adalah penambahan method ```add()``` pada class LinkedList.  Seperti yang dijelaskan sebelumnya, penambahan node baru harus dilakukan dengan urutan yang tepat, yaitu:<br>\n```\ntemp=Node(item) #temp adalah node baru yang akan ditambahkan\ntemp.setNext(self.head) #pointer Next dari node temp menunjuk pada node yang ditunjuk oleh pointer head\nself.head=temp #pointer head menunjuk pada node temp yang sudah tersambung dengan linked list\n```","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ec2130","input":"## Code\n\nBerikut adalah penambahan method ```remove()``` untuk menghapus node yang diinginkan pada linked list","pos":47,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ec315e","input":"## Linked List Class\n\n","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f7483d","input":"### Pencarian Node pada Linked List\n\nUntuk pencarian node di dalam linked list juga perlu dilakukan *traverse* linked list seperti sebelumnya, hanya saja setiap berada pada suatu node, maka dilakukan pencocokan apakah node tersebut adalah node yang dicari, seperti Gambar 7 berikut:<br>\n![title](images/searchList.png)<br>\n**Gambar 7. Pencarian Node pada Linked List**<br>\n\n\nSeperti halnya pada method sebelumnya, terdapat pointer curent yang bergerak dari awal sampai akhir, hanya saja diperlukan pencocokan antara data yang terdapat pada curent dengan data yang dicari.  Implementasi pencarian dapat dilihat pada method berikut\n\n\n## Code\nBerikut penambahan method ```search()``` pada class LinkedList.  Method ```search()``` ini hampir sama dengan method ```size```, hanya saja jika ditambahkan apakah node yang ditunjukkan oleh pointer curent adalah node yang dicari, dengan perintah:\n```\nif curent.getData() == item: #dimana item adalah node yang dicari\n```\nmaka method ini akan menghasilkan nilai True.","pos":36,"state":"done","type":"cell"}
{"id":0,"time":1591969738902,"type":"user"}
{"last_load":1591973042867,"type":"file"}